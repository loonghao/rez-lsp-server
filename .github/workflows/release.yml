name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          # Check if version contains pre-release identifiers
          if [[ $VERSION =~ (alpha|beta|rc) ]]; then
            IS_PRERELEASE=true
          else
            IS_PRERELEASE=false
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION (prerelease: $IS_PRERELEASE)"

    - name: Validate version format
      run: |
        if [[ ! "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
          echo "Invalid version format: ${{ steps.version.outputs.version }}"
          exit 1
        fi

  test:
    name: Test Before Release
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --lib --verbose

    - name: Build release
      run: cargo build --release --verbose

  build_binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: [validate, test]
    strategy:
      matrix:
        include:
          # Linux targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rez-lsp-server-linux-x64
            asset_name: rez-lsp-server-linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rez-lsp-server-linux-arm64
            asset_name: rez-lsp-server-linux-arm64
            cross: true
          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rez-lsp-server-windows-x64.exe
            asset_name: rez-lsp-server-windows-x64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: rez-lsp-server-windows-arm64.exe
            asset_name: rez-lsp-server-windows-arm64.exe
          # macOS targets
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rez-lsp-server-macos-x64
            asset_name: rez-lsp-server-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rez-lsp-server-macos-arm64
            asset_name: rez-lsp-server-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cross-compilation tools
      if: matrix.cross == true
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Setup cross-compilation for ARM64 Linux
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build binary (native)
      if: matrix.cross != true
      run: cargo build --release --target ${{ matrix.target }}

    - name: Build binary (cross-compile)
      if: matrix.cross == true
      run: cross build --release --target ${{ matrix.target }}

    - name: Prepare artifact (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/rez-lsp-server ${{ matrix.artifact_name }}
        chmod +x ${{ matrix.artifact_name }}
        tar -czf ${{ matrix.artifact_name }}.tar.gz ${{ matrix.artifact_name }}

    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\rez-lsp-server.exe ${{ matrix.artifact_name }}
        7z a ${{ matrix.artifact_name }}.zip ${{ matrix.artifact_name }}

    - name: Upload binary artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: |
          ${{ matrix.artifact_name }}.tar.gz
          ${{ matrix.artifact_name }}.zip
        retention-days: 30

  build_vscode_extension:
    name: Build VSCode Extension
    runs-on: ubuntu-latest
    needs: [validate, test]
    outputs:
      extension_path: ${{ steps.package.outputs.extension_path }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: vscode-extension/package-lock.json

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ubuntu-latest-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build LSP server
      run: cargo build --release

    - name: Update extension version
      working-directory: vscode-extension
      run: |
        npm version ${{ needs.validate.outputs.version }} --no-git-tag-version

    - name: Install extension dependencies
      working-directory: vscode-extension
      run: npm ci

    - name: Compile extension
      working-directory: vscode-extension
      run: npm run compile

    - name: Package extension
      id: package
      working-directory: vscode-extension
      run: |
        npm install -g vsce
        EXTENSION_FILE="rez-lsp-extension-${{ needs.validate.outputs.version }}.vsix"
        vsce package --out "$EXTENSION_FILE"
        echo "extension_path=vscode-extension/$EXTENSION_FILE" >> $GITHUB_OUTPUT

    - name: Upload extension artifact
      uses: actions/upload-artifact@v3
      with:
        name: vscode-extension-release
        path: ${{ steps.package.outputs.extension_path }}
        retention-days: 30

  publish_vscode_extension:
    name: Publish VSCode Extension
    runs-on: ubuntu-latest
    needs: [validate, build_vscode_extension]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: vscode-marketplace
    steps:
    - name: Download extension artifact
      uses: actions/download-artifact@v3
      with:
        name: vscode-extension-release
        path: ./

    - name: Publish to Open VSX Registry
      uses: HaaLeo/publish-vscode-extension@v2
      id: publishToOpenVSX
      with:
        pat: ${{ secrets.OPEN_VSX_TOKEN }}
        extensionFile: rez-lsp-extension-${{ needs.validate.outputs.version }}.vsix
        preRelease: ${{ needs.validate.outputs.is_prerelease }}
        skipDuplicate: true

    - name: Publish to Visual Studio Marketplace
      uses: HaaLeo/publish-vscode-extension@v2
      with:
        pat: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}
        registryUrl: https://marketplace.visualstudio.com
        extensionFile: rez-lsp-extension-${{ needs.validate.outputs.version }}.vsix
        preRelease: ${{ needs.validate.outputs.is_prerelease }}
        skipDuplicate: true

  create_github_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build_binaries, build_vscode_extension]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -o -name "*.zip" -o -name "*.vsix" | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        # Extract changelog for this version
        if [[ -f CHANGELOG.md ]]; then
          # Extract section between this version and the next
          awk "/## \[$VERSION\]/,/## \[/{if(/## \[/ && !/## \[$VERSION\]/) exit; print}" CHANGELOG.md > release_notes.md
        else
          echo "Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate.outputs.version }}
        name: Release v${{ needs.validate.outputs.version }}
        body_path: release_notes.md
        prerelease: ${{ needs.validate.outputs.is_prerelease }}
        files: release-assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
